{"version":3,"file":"static/js/639.fb416c9e.chunk.js","mappings":"uMAYAA,EAAAA,GAAQC,SAASC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,IAEzE,MA4FA,EA5FuBC,KACrB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,OACtCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IA+B7C,IA7BAK,EAAAA,EAAAA,WAAU,KAERC,WAAW,KACT,MAAMC,EAAU,CACd,CAAEC,KAAM,aAAcC,OAAQ,IAAKC,WAAY,KAC/C,CAAEF,KAAM,aAAcC,OAAQ,IAAKC,WAAY,KAC/C,CAAEF,KAAM,UAAWC,QAAS,GAAKC,WAAY,KAC7C,CAAEF,KAAM,SAAUC,OAAQ,IAAKC,WAAY,KAC3C,CAAEF,KAAM,WAAYC,OAAQ,GAAKC,WAAY,MAIzCC,EAAeJ,EAAQK,OAAO,CAACC,EAAKC,IACxCA,EAAOJ,WAAaG,EAAIH,WAAaI,EAASD,EAAKN,EAAQ,IAEvDQ,EAAcR,EAAQK,OAAO,CAACC,EAAKC,IACvCA,EAAOL,OAASI,EAAIJ,OAASK,EAASD,EAAKN,EAAQ,IAErDH,EACE,4BAA4BW,EAAYP,gEAC/BG,EAAaH,0GAIxBT,EAAcQ,GACdL,GAAW,IACV,MACF,IAECD,EACF,OACEe,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uCAAsCC,SAAC,qBACrDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,UACpDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iFAMvB,MAAMG,EAAY,CAChBC,OAAQvB,EAAWwB,IAAIC,GAAKA,EAAEf,MAC9BgB,SAAU,CACR,CACEC,MAAO,mBACPC,KAAM5B,EAAWwB,IAAIC,GAAKA,EAAEd,QAC5BkB,gBAAiB7B,EAAWwB,IAAIC,GAAKA,EAAEd,QAAU,EAAI,0BAA4B,2BACjFmB,YAAa9B,EAAWwB,IAAIC,GAAKA,EAAEd,QAAU,EAAI,oBAAsB,qBACvEoB,YAAa,GAEf,CACEJ,MAAO,mBACPC,KAAM5B,EAAWwB,IAAIC,GAAKA,EAAEb,YAC5BiB,gBAAiB,2BACjBC,YAAa,qBACbC,YAAa,KAkBnB,OACEb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAACW,EAAAA,GAAG,CAACJ,KAAMN,EAAWW,QAfV,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,OAEZC,MAAO,CACLC,SAAS,EACTC,KAAM,oCASRtB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAC,0BACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BAA2BC,UACxCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAEf,Y","sources":["components/SectorAnalysis.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { \r\n  Chart as ChartJS, \r\n  CategoryScale, \r\n  LinearScale, \r\n  BarElement, \r\n  Title, \r\n  Tooltip, \r\n  Legend \r\n} from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nconst SectorAnalysis = () => {\r\n  const [sectorData, setSectorData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [prediction, setPrediction] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Simulated API call to get sector data\r\n    setTimeout(() => {\r\n      const sectors = [\r\n        { name: 'Technology', change: 2.5, volatility: 1.8 },\r\n        { name: 'Healthcare', change: 1.2, volatility: 1.2 },\r\n        { name: 'Finance', change: -0.8, volatility: 2.1 },\r\n        { name: 'Energy', change: 3.1, volatility: 2.5 },\r\n        { name: 'Consumer', change: 0.5, volatility: 1.1 },\r\n      ];\r\n      \r\n      // AI prediction based on sector data\r\n      const mostVolatile = sectors.reduce((max, sector) => \r\n        sector.volatility > max.volatility ? sector : max, sectors[0]);\r\n      \r\n      const mostGrowing = sectors.reduce((max, sector) => \r\n        sector.change > max.change ? sector : max, sectors[0]);\r\n      \r\n      setPrediction(\r\n        `Based on current trends, ${mostGrowing.name} sector is showing the strongest growth potential, ` +\r\n        `while ${mostVolatile.name} is the most volatile. Consider diversifying investments ` +\r\n        `across these sectors for optimal returns.`\r\n      );\r\n      \r\n      setSectorData(sectors);\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"bg-white rounded-xl shadow-md p-4\">\r\n        <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Sector Analysis</h2>\r\n        <div className=\"flex justify-center items-center h-40\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const chartData = {\r\n    labels: sectorData.map(s => s.name),\r\n    datasets: [\r\n      {\r\n        label: 'Daily Change (%)',\r\n        data: sectorData.map(s => s.change),\r\n        backgroundColor: sectorData.map(s => s.change >= 0 ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)'),\r\n        borderColor: sectorData.map(s => s.change >= 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)'),\r\n        borderWidth: 1,\r\n      },\r\n      {\r\n        label: 'Volatility Index',\r\n        data: sectorData.map(s => s.volatility),\r\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n        borderColor: 'rgb(153, 102, 255)',\r\n        borderWidth: 1,\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Sector Performance Analysis',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow-md p-4\">\r\n      <Bar data={chartData} options={options} />\r\n      \r\n      <div className=\"mt-6\">\r\n        <h3 className=\"font-bold text-lg mb-2\">AI Sector Prediction</h3>\r\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n          <p className=\"text-blue-800\">{prediction}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectorAnalysis; "],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","SectorAnalysis","sectorData","setSectorData","useState","loading","setLoading","prediction","setPrediction","useEffect","setTimeout","sectors","name","change","volatility","mostVolatile","reduce","max","sector","mostGrowing","_jsxs","className","children","_jsx","chartData","labels","map","s","datasets","label","data","backgroundColor","borderColor","borderWidth","Bar","options","responsive","plugins","legend","position","title","display","text"],"sourceRoot":""}