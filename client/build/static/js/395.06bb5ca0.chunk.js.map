{"version":3,"file":"static/js/395.06bb5ca0.chunk.js","mappings":"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","sources":["components/AITradingBot.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst AITradingBot = () => {\r\n  const [predictions, setPredictions] = useState([\r\n    { symbol: 'RELIANCE', action: 'BUY', confidence: 92, price: 2450, target: 2600 },\r\n    { symbol: 'HDFCBANK', action: 'HOLD', confidence: 78, price: 1650, target: 1700 },\r\n    { symbol: 'INFY', action: 'SELL', confidence: 85, price: 1425, target: 1350 },\r\n    { symbol: 'TCS', action: 'BUY', confidence: 88, price: 3250, target: 3400 },\r\n  ]);\r\n\r\n  const [newSymbol, setNewSymbol] = useState('');\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n\r\n  const analyzeStock = () => {\r\n    if (!newSymbol) return;\r\n    \r\n    setIsAnalyzing(true);\r\n    \r\n    // Simulate AI analysis\r\n    setTimeout(() => {\r\n      const actions = ['BUY', 'SELL', 'HOLD'];\r\n      const action = actions[Math.floor(Math.random() * actions.length)];\r\n      const confidence = Math.floor(Math.random() * 30) + 70;\r\n      const price = Math.floor(Math.random() * 1000) + 1000;\r\n      const target = action === 'BUY' \r\n        ? Math.floor(price * 1.05) \r\n        : action === 'SELL' \r\n          ? Math.floor(price * 0.95) \r\n          : price;\r\n      \r\n      setPredictions([\r\n        { symbol: newSymbol.toUpperCase(), action, confidence, price, target },\r\n        ...predictions\r\n      ]);\r\n      \r\n      setNewSymbol('');\r\n      setIsAnalyzing(false);\r\n    }, 1500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow-md p-4\">\r\n      <h2 className=\"text-xl font-bold text-gray-800 mb-4\">AI Trading Bot</h2>\r\n      \r\n      <div className=\"mb-4 flex\">\r\n        <input\r\n          type=\"text\"\r\n          value={newSymbol}\r\n          onChange={(e) => setNewSymbol(e.target.value)}\r\n          placeholder=\"Enter stock symbol\"\r\n          className=\"flex-1 p-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        />\r\n        <button\r\n          onClick={analyzeStock}\r\n          disabled={isAnalyzing}\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700 disabled:bg-gray-400\"\r\n        >\r\n          {isAnalyzing ? 'Analyzing...' : 'Analyze'}\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"space-y-3\">\r\n        {predictions.map((prediction, index) => (\r\n          <div key={index} className=\"border-b pb-3 last:border-0 last:pb-0\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <div className=\"font-bold text-lg\">{prediction.symbol}</div>\r\n              <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\r\n                prediction.action === 'BUY' ? 'bg-green-100 text-green-800' :\r\n                prediction.action === 'SELL' ? 'bg-red-100 text-red-800' :\r\n                'bg-yellow-100 text-yellow-800'\r\n              }`}>\r\n                {prediction.action}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-2 gap-2 mt-2\">\r\n              <div>\r\n                <span className=\"text-gray-600\">Current: </span>\r\n                <span className=\"font-medium\">₹{prediction.price}</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"text-gray-600\">Target: </span>\r\n                <span className=\"font-medium\">₹{prediction.target}</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"text-gray-600\">Confidence: </span>\r\n                <span className=\"font-medium\">{prediction.confidence}%</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"text-gray-600\">Potential: </span>\r\n                <span className={`font-medium ${\r\n                  prediction.action === 'BUY' ? 'text-green-600' : \r\n                  prediction.action === 'SELL' ? 'text-red-600' : 'text-yellow-600'\r\n                }`}>\r\n                  {prediction.action === 'BUY' ? `+${(prediction.target - prediction.price).toLocaleString()}` : \r\n                   prediction.action === 'SELL' ? `-${(prediction.price - prediction.target).toLocaleString()}` : \r\n                   'Hold'}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AITradingBot; "],"names":["AITradingBot","predictions","setPredictions","useState","symbol","action","confidence","price","target","newSymbol","setNewSymbol","isAnalyzing","setIsAnalyzing","_jsxs","className","children","_jsx","type","value","onChange","e","placeholder","onClick","analyzeStock","setTimeout","actions","Math","floor","random","length","toUpperCase","disabled","map","prediction","index","toLocaleString"],"sourceRoot":""}