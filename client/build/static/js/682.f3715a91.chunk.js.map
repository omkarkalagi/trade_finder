{"version":3,"file":"static/js/682.f3715a91.chunk.js","mappings":"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","sources":["pages/AlgoTrading.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { \r\n  Chart as ChartJS, \r\n  CategoryScale, \r\n  LinearScale, \r\n  BarElement, \r\n  Title, \r\n  Tooltip, \r\n  Legend \r\n} from 'chart.js';\r\nimport { QRCodeSVG } from 'qrcode.react';\r\nimport axios from 'axios';\r\nimport { generateTradingStrategies } from '../services/algoService';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nconst AlgoTrading = () => {\r\n  const [budget, setBudget] = useState(100000);\r\n  const [strategies, setStrategies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  // Auto-trading states\r\n  const [autoTradeAmount, setAutoTradeAmount] = useState(100000);\r\n  const [isPaymentProcessing, setIsPaymentProcessing] = useState(false);\r\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n  const [autoTrades, setAutoTrades] = useState([]);\r\n  const [expectedProfit, setExpectedProfit] = useState(0);\r\n  const [expectedTime, setExpectedTime] = useState(0); // in hours\r\n  const [timeLeft, setTimeLeft] = useState(0); // in seconds\r\n  const [currentProfit, setCurrentProfit] = useState(0);\r\n  const [paymentId, setPaymentId] = useState('');\r\n  const [tradeHistory, setTradeHistory] = useState([]);\r\n\r\n  const generateStrategies = () => {\r\n    setLoading(true);\r\n    \r\n    // Simulate AI strategy generation\r\n    setTimeout(() => {\r\n      const newStrategies = [\r\n        {\r\n          id: 1,\r\n          stock: 'RELIANCE',\r\n          buyPrice: 2435.50,\r\n          sellPrice: 2550.00,\r\n          quantity: Math.floor(budget * 0.3 / 2435.50),\r\n          holdingPeriod: '1-3 days',\r\n          confidence: 88,\r\n          rationale: 'Breakout from consolidation pattern with high volume'\r\n        },\r\n        {\r\n          id: 2,\r\n          stock: 'HDFCBANK',\r\n          buyPrice: 1630.25,\r\n          sellPrice: 1700.00,\r\n          quantity: Math.floor(budget * 0.25 / 1630.25),\r\n          holdingPeriod: '2-5 days',\r\n          confidence: 82,\r\n          rationale: 'Oversold RSI with institutional buying'\r\n        },\r\n        {\r\n          id: 3,\r\n          stock: 'INFY',\r\n          buyPrice: 1405.75,\r\n          sellPrice: 1480.00,\r\n          quantity: Math.floor(budget * 0.2 / 1405.75),\r\n          holdingPeriod: '3-7 days',\r\n          confidence: 79,\r\n          rationale: 'Bullish divergence on MACD indicator'\r\n        },\r\n        {\r\n          id: 4,\r\n          stock: 'BAJFINANCE',\r\n          buyPrice: 7200.00,\r\n          sellPrice: 7500.00,\r\n          quantity: Math.floor(budget * 0.15 / 7200.00),\r\n          holdingPeriod: '1-2 weeks',\r\n          confidence: 85,\r\n          rationale: 'Strong earnings growth potential'\r\n        },\r\n        {\r\n          id: 5,\r\n          stock: 'TATAMOTORS',\r\n          buyPrice: 850.50,\r\n          sellPrice: 900.00,\r\n          quantity: Math.floor(budget * 0.1 / 850.50),\r\n          holdingPeriod: '3-5 days',\r\n          confidence: 76,\r\n          rationale: 'Sector rotation into automotive stocks'\r\n        }\r\n      ];\r\n      \r\n      setStrategies(newStrategies);\r\n      setLoading(false);\r\n    }, 1500);\r\n  };\r\n\r\n  // Calculate potential profits\r\n  const calculateProfit = (strategy) => {\r\n    const investment = strategy.buyPrice * strategy.quantity;\r\n    const returns = strategy.sellPrice * strategy.quantity;\r\n    return {\r\n      investment,\r\n      returns,\r\n      profit: returns - investment,\r\n      roi: ((returns - investment) / investment * 100).toFixed(2)\r\n    };\r\n  };\r\n\r\n  // Prepare data for chart\r\n  const chartData = {\r\n    labels: strategies.map(s => s.stock),\r\n    datasets: [\r\n      {\r\n        label: 'Potential ROI (%)',\r\n        data: strategies.map(s => parseFloat(calculateProfit(s).roi)),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        borderWidth: 1\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Simulate payment processing and auto-trade execution\r\n  const handleAutoTradePayment = async () => {\r\n    setIsPaymentProcessing(true);\r\n    \r\n    try {\r\n      // In real app, this would call your payment API\r\n      const paymentResponse = await axios.post('/api/payments/create', {\r\n        amount: autoTradeAmount,\r\n        currency: 'INR'\r\n      });\r\n      \r\n      setPaymentId(paymentResponse.data.id);\r\n      \r\n      // Simulate payment confirmation\r\n      setTimeout(async () => {\r\n        setIsPaymentProcessing(false);\r\n        setPaymentSuccess(true);\r\n        \r\n        // Execute auto-trades\r\n        const executionResponse = await axios.post('/api/auto-trading/execute', {\r\n          amount: autoTradeAmount,\r\n          paymentId: paymentResponse.data.id\r\n        });\r\n        \r\n        setAutoTrades(executionResponse.data.trades);\r\n        setExpectedProfit(executionResponse.data.expectedProfit);\r\n        setExpectedTime(executionResponse.data.expectedTimeHours);\r\n        setTimeLeft(executionResponse.data.expectedTimeHours * 3600);\r\n        setTradeHistory(executionResponse.data.tradeHistory);\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      setIsPaymentProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Countdown timer and profit simulation\r\n  useEffect(() => {\r\n    let timer;\r\n    if (paymentSuccess && timeLeft > 0) {\r\n      timer = setInterval(() => {\r\n        setTimeLeft(prev => prev - 1);\r\n        \r\n        // Simulate profit growth (linear for demo)\r\n        const progress = 1 - (timeLeft / (expectedTime * 3600));\r\n        setCurrentProfit(Math.floor(expectedProfit * progress));\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [paymentSuccess, timeLeft, expectedProfit, expectedTime]);\r\n\r\n  // Format time for display\r\n  const formatTime = (seconds) => {\r\n    const days = Math.floor(seconds / (3600 * 24));\r\n    const hours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return `${days}d ${hours}h ${minutes}m ${secs}s`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Algorithmic Trading</h1>\r\n      \r\n      <div className=\"bg-white rounded-xl shadow-md p-6 mb-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Investment Parameters</h2>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex-1\">\r\n            <label className=\"block text-gray-700 mb-2\">Investment Budget (₹)</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"10000\"\r\n              max=\"1000000\"\r\n              step=\"10000\"\r\n              value={budget}\r\n              onChange={(e) => setBudget(Number(e.target.value))}\r\n              className=\"w-full\"\r\n            />\r\n            <div className=\"text-center mt-2 text-lg font-semibold\">\r\n              ₹{budget.toLocaleString()}\r\n            </div>\r\n          </div>\r\n          <button\r\n            onClick={generateStrategies}\r\n            disabled={loading}\r\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\r\n          >\r\n            {loading ? 'Generating Strategies...' : 'Generate Strategies'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {strategies.length > 0 && (\r\n        <>\r\n          <div className=\"bg-white rounded-xl shadow-md p-6 mb-6\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Strategy Performance</h2>\r\n            <div className=\"h-80\">\r\n              <Bar \r\n                data={chartData} \r\n                options={{\r\n                  responsive: true,\r\n                  maintainAspectRatio: false,\r\n                  plugins: {\r\n                    legend: { position: 'top' },\r\n                    title: { display: true, text: 'Potential Return on Investment' }\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {strategies.map(strategy => {\r\n              const profitData = calculateProfit(strategy);\r\n              \r\n              return (\r\n                <div key={strategy.id} className=\"bg-white rounded-xl shadow-md p-4\">\r\n                  <div className=\"flex justify-between items-start mb-4\">\r\n                    <div>\r\n                      <h3 className=\"font-bold text-lg\">{strategy.stock}</h3>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        Confidence: <span className=\"font-semibold\">{strategy.confidence}%</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\">\r\n                      Hold: {strategy.holdingPeriod}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-2 gap-3 mb-4\">\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500 text-sm\">Buy At</div>\r\n                      <div className=\"font-bold\">₹{strategy.buyPrice.toFixed(2)}</div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500 text-sm\">Sell At</div>\r\n                      <div className=\"font-bold\">₹{strategy.sellPrice.toFixed(2)}</div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500 text-sm\">Quantity</div>\r\n                      <div className=\"font-bold\">{strategy.quantity}</div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500 text-sm\">ROI</div>\r\n                      <div className=\"font-bold text-green-600\">{profitData.roi}%</div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"mb-3\">\r\n                    <div className=\"flex justify-between text-sm mb-1\">\r\n                      <span>Investment:</span>\r\n                      <span>₹{profitData.investment.toLocaleString()}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between text-sm mb-1\">\r\n                      <span>Expected Returns:</span>\r\n                      <span>₹{profitData.returns.toLocaleString()}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between font-semibold mt-2\">\r\n                      <span>Potential Profit:</span>\r\n                      <span className=\"text-green-600\">₹{profitData.profit.toLocaleString()}</span>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-gray-600 mt-3\">\r\n                    <span className=\"font-medium\">Rationale:</span> {strategy.rationale}\r\n                  </div>\r\n                  \r\n                  <button className=\"w-full mt-4 bg-blue-100 text-blue-700 py-2 rounded-lg hover:bg-blue-200\">\r\n                    Execute This Strategy\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n      \r\n      {/* Auto Trading Section */}\r\n      <div className=\"bg-white rounded-xl shadow-md p-6 mb-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Auto Trading</h2>\r\n        \r\n        {!paymentSuccess ? (\r\n          <>\r\n            <p className=\"mb-4\">\r\n              Enter the amount you want to invest in auto-trading. Our AI will automatically execute \r\n              trades and manage your portfolio to maximize returns.\r\n            </p>\r\n            \r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"flex-1\">\r\n                <label className=\"block text-gray-700 mb-2\">Investment Amount (₹)</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"10000\"\r\n                  max=\"1000000\"\r\n                  step=\"10000\"\r\n                  value={autoTradeAmount}\r\n                  onChange={(e) => setAutoTradeAmount(Number(e.target.value))}\r\n                  className=\"w-full\"\r\n                />\r\n                <div className=\"text-center mt-2 text-lg font-semibold\">\r\n                  ₹{autoTradeAmount.toLocaleString()}\r\n                </div>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={handleAutoTradePayment}\r\n                disabled={isPaymentProcessing}\r\n                className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400\"\r\n              >\r\n                {isPaymentProcessing ? 'Processing...' : 'Start Auto Trading'}\r\n              </button>\r\n            </div>\r\n            \r\n            {isPaymentProcessing && (\r\n              <div className=\"mt-6 text-center\">\r\n                <div className=\"mb-4\">Scan QR Code to Pay</div>\r\n                <QRCodeSVG \r\n                  value={`upi://pay?pa=kalagigroup@upi&pn=Kalagi%20Group&am=${autoTradeAmount}&tn=AutoTrading`}\r\n                  size={256}\r\n                  className=\"mx-auto border p-2 rounded-lg\"\r\n                />\r\n                <div className=\"mt-4 text-sm text-gray-500\">\r\n                  Pay ₹{autoTradeAmount.toLocaleString()} to start auto trading\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div>\r\n            <div className=\"bg-green-50 text-green-800 p-4 rounded-lg mb-6\">\r\n              <h3 className=\"font-bold text-lg mb-2\">Auto Trading Activated!</h3>\r\n              <p>\r\n                Your investment of ₹{autoTradeAmount.toLocaleString()} is being managed by our AI. \r\n                Expected profit: ₹{expectedProfit.toLocaleString()} in {expectedTime} hours.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                <h3 className=\"font-bold text-lg mb-2\">Profit Progress</h3>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-blue-700 mb-2\">\r\n                    ₹{currentProfit.toLocaleString()}\r\n                  </div>\r\n                  <div className=\"text-gray-600\">\r\n                    of ₹{expectedProfit.toLocaleString()} expected\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <div className=\"flex justify-between mb-1\">\r\n                    <span>Time remaining:</span>\r\n                    <span>{formatTime(timeLeft)}</span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                    <div \r\n                      className=\"bg-blue-600 h-2.5 rounded-full\" \r\n                      style={{ width: `${((expectedTime * 3600 - timeLeft) / (expectedTime * 3600)) * 100}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-purple-50 p-4 rounded-lg\">\r\n                <h3 className=\"font-bold text-lg mb-2\">Current Portfolio</h3>\r\n                <div className=\"space-y-2\">\r\n                  {autoTrades.map((trade, index) => (\r\n                    <div key={index} className=\"flex justify-between\">\r\n                      <span className=\"font-medium\">{trade.stock}</span>\r\n                      <span>{trade.quantity} shares</span>\r\n                      <span className={`${trade.action === 'BUY' ? 'text-green-600' : 'text-red-600'}`}>\r\n                        {trade.action}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"mb-6\">\r\n              <h3 className=\"font-bold text-lg mb-4\">Trade History</h3>\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"px-4 py-2 text-left\">Time</th>\r\n                      <th className=\"px-4 py-2 text-left\">Stock</th>\r\n                      <th className=\"px-4 py-2 text-left\">Action</th>\r\n                      <th className=\"px-4 py-2 text-right\">Price</th>\r\n                      <th className=\"px-4 py-2 text-right\">Quantity</th>\r\n                      <th className=\"px-4 py-2 text-right\">Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {tradeHistory.map((trade, index) => (\r\n                      <tr key={index}>\r\n                        <td className=\"px-4 py-2 whitespace-nowrap\">{trade.time}</td>\r\n                        <td className=\"px-4 py-2 font-medium\">{trade.stock}</td>\r\n                        <td className={`px-4 py-2 font-semibold ${\r\n                          trade.action === 'BUY' ? 'text-green-600' : 'text-red-600'\r\n                        }`}>\r\n                          {trade.action}\r\n                        </td>\r\n                        <td className=\"px-4 py-2 text-right\">₹{trade.price.toFixed(2)}</td>\r\n                        <td className=\"px-4 py-2 text-right\">{trade.quantity}</td>\r\n                        <td className=\"px-4 py-2 text-right\">₹{(trade.price * trade.quantity).toLocaleString()}</td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"text-center\">\r\n              <button \r\n                className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600\"\r\n                onClick={() => {\r\n                  setPaymentSuccess(false);\r\n                  setAutoTrades([]);\r\n                  setTradeHistory([]);\r\n                }}\r\n              >\r\n                Stop Auto Trading\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlgoTrading; "],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","AlgoTrading","budget","setBudget","useState","strategies","setStrategies","loading","setLoading","autoTradeAmount","setAutoTradeAmount","isPaymentProcessing","setIsPaymentProcessing","paymentSuccess","setPaymentSuccess","autoTrades","setAutoTrades","expectedProfit","setExpectedProfit","expectedTime","setExpectedTime","timeLeft","setTimeLeft","currentProfit","setCurrentProfit","paymentId","setPaymentId","tradeHistory","setTradeHistory","calculateProfit","strategy","investment","buyPrice","quantity","returns","sellPrice","profit","roi","toFixed","chartData","labels","map","s","stock","datasets","label","data","parseFloat","backgroundColor","borderColor","borderWidth","useEffect","timer","setInterval","prev","progress","Math","floor","clearInterval","_jsxs","className","children","_jsx","type","min","max","step","value","onChange","e","Number","target","toLocaleString","onClick","generateStrategies","setTimeout","newStrategies","id","holdingPeriod","confidence","rationale","disabled","length","_Fragment","Bar","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","profitData","seconds","style","width","trade","index","action","time","price","async","paymentResponse","axios","post","amount","currency","executionResponse","trades","expectedTimeHours","error","console","QRCodeSVG","size"],"sourceRoot":""}