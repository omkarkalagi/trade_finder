{"version":3,"file":"static/js/614.db21fcb4.chunk.js","mappings":"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","sources":["../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size,\n  boostLevel\n}) {\n  let qrcode = React.useMemo(() => {\n    const values = Array.isArray(value) ? value : [value];\n    const segments = values.reduce((accum, v) => {\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\n      return accum;\n    }, []);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion,\n      void 0,\n      void 0,\n      boostLevel\n    );\n  }, [value, level, minVersion, boostLevel]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],"names":["qrcodegen","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","qrcodegen2","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","dataUsedBits","minVersion","arguments","length","undefined","maxVersion","boostEcl","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","QrCode","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","boostLevel","qrcode","React","segments","Array","isArray","accum","v","cells","numCells","calculatedImageSettings","cells2","margin2","getMarginSize","numCells2","calculatedImageSettings2","defaultSize","scale","width","height","opacity","excavate","floorX","floorY","crossOrigin","getImageSettings","SUPPORTS_PATH2D","Path2D","addPath","e","props","forwardedRef","_a","bgColor","fgColor","_b","style","otherProps","imgSrc","src","_canvas","_image","setCanvasRef","node","current","isImgLoaded","setIsImageLoaded","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","display","onLoad","ref","role","displayName","QRCodeSVG","title","href","preserveAspectRatio","fgPath","viewBox","d","shapeRendering"],"sourceRoot":""}